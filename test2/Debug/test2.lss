
test2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000032c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000034  00800060  0000032c  000003c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800094  00800094  000003f4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003f4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000424  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000080  00000000  00000000  00000460  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000c02  00000000  00000000  000004e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000827  00000000  00000000  000010e2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000006a1  00000000  00000000  00001909  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000d8  00000000  00000000  00001fac  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003ea  00000000  00000000  00002084  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000408  00000000  00000000  0000246e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  00002876  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec e2       	ldi	r30, 0x2C	; 44
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a4 39       	cpi	r26, 0x94	; 148
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a4 e9       	ldi	r26, 0x94	; 148
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a6 39       	cpi	r26, 0x96	; 150
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 1d 01 	call	0x23a	; 0x23a <main>
  8a:	0c 94 94 01 	jmp	0x328	; 0x328 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <keyfind>:

char keyfind()
{
	while(1)
	{
		KEY_DDR = 0xF0;           /* set port direction as input-output */
  92:	80 ef       	ldi	r24, 0xF0	; 240
  94:	84 bb       	out	0x14, r24	; 20
		KEY_PRT = 0xFF;
  96:	8f ef       	ldi	r24, 0xFF	; 255
  98:	85 bb       	out	0x15, r24	; 21

		do
		{
			KEY_PRT &= 0x0F;      /* mask PORT for column read only */
  9a:	85 b3       	in	r24, 0x15	; 21
  9c:	8f 70       	andi	r24, 0x0F	; 15
  9e:	85 bb       	out	0x15, r24	; 21
			asm("NOP");
  a0:	00 00       	nop
			colloc = (KEY_PIN & 0x0F); /* read status of column */
  a2:	83 b3       	in	r24, 0x13	; 19
  a4:	8f 70       	andi	r24, 0x0F	; 15
  a6:	80 93 94 00 	sts	0x0094, r24	; 0x800094 <__data_end>
		}while(colloc != 0x0F);
  aa:	8f 30       	cpi	r24, 0x0F	; 15
  ac:	b1 f7       	brne	.-20     	; 0x9a <keyfind+0x8>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ae:	87 e8       	ldi	r24, 0x87	; 135
  b0:	93 e1       	ldi	r25, 0x13	; 19
  b2:	01 97       	sbiw	r24, 0x01	; 1
  b4:	f1 f7       	brne	.-4      	; 0xb2 <keyfind+0x20>
  b6:	00 c0       	rjmp	.+0      	; 0xb8 <keyfind+0x26>
  b8:	00 00       	nop
		do
		{
			do
			{
				_delay_ms(20);             /* 20ms key debounce time */
				colloc = (KEY_PIN & 0x0F); /* read status of column */
  ba:	83 b3       	in	r24, 0x13	; 19
  bc:	8f 70       	andi	r24, 0x0F	; 15
  be:	80 93 94 00 	sts	0x0094, r24	; 0x800094 <__data_end>
				}while(colloc == 0x0F);        /* check for any key press */
  c2:	8f 30       	cpi	r24, 0x0F	; 15
  c4:	a1 f3       	breq	.-24     	; 0xae <keyfind+0x1c>
  c6:	8f e0       	ldi	r24, 0x0F	; 15
  c8:	97 e2       	ldi	r25, 0x27	; 39
  ca:	01 97       	sbiw	r24, 0x01	; 1
  cc:	f1 f7       	brne	.-4      	; 0xca <keyfind+0x38>
  ce:	00 c0       	rjmp	.+0      	; 0xd0 <keyfind+0x3e>
  d0:	00 00       	nop
				
				_delay_ms (40);	            /* 20 ms key debounce time */
				colloc = (KEY_PIN & 0x0F);
  d2:	83 b3       	in	r24, 0x13	; 19
  d4:	8f 70       	andi	r24, 0x0F	; 15
  d6:	80 93 94 00 	sts	0x0094, r24	; 0x800094 <__data_end>
			}while(colloc == 0x0F);
  da:	8f 30       	cpi	r24, 0x0F	; 15
  dc:	41 f3       	breq	.-48     	; 0xae <keyfind+0x1c>

			/* now check for rows */
			KEY_PRT = 0xEF;            /* check for pressed key in 1st row */
  de:	8f ee       	ldi	r24, 0xEF	; 239
  e0:	85 bb       	out	0x15, r24	; 21
			asm("NOP");
  e2:	00 00       	nop
			colloc = (KEY_PIN & 0x0F);
  e4:	83 b3       	in	r24, 0x13	; 19
  e6:	8f 70       	andi	r24, 0x0F	; 15
  e8:	80 93 94 00 	sts	0x0094, r24	; 0x800094 <__data_end>
			if(colloc != 0x0F)
  ec:	8f 30       	cpi	r24, 0x0F	; 15
  ee:	19 f0       	breq	.+6      	; 0xf6 <keyfind+0x64>
			{
				rowloc = 0;
  f0:	10 92 95 00 	sts	0x0095, r1	; 0x800095 <rowloc>
				break;
  f4:	27 c0       	rjmp	.+78     	; 0x144 <keyfind+0xb2>
			}

			KEY_PRT = 0xDF;		/* check for pressed key in 2nd row */
  f6:	8f ed       	ldi	r24, 0xDF	; 223
  f8:	85 bb       	out	0x15, r24	; 21
			asm("NOP");
  fa:	00 00       	nop
			colloc = (KEY_PIN & 0x0F);
  fc:	83 b3       	in	r24, 0x13	; 19
  fe:	8f 70       	andi	r24, 0x0F	; 15
 100:	80 93 94 00 	sts	0x0094, r24	; 0x800094 <__data_end>
			if(colloc != 0x0F)
 104:	8f 30       	cpi	r24, 0x0F	; 15
 106:	21 f0       	breq	.+8      	; 0x110 <keyfind+0x7e>
			{
				rowloc = 1;
 108:	81 e0       	ldi	r24, 0x01	; 1
 10a:	80 93 95 00 	sts	0x0095, r24	; 0x800095 <rowloc>
				break;
 10e:	1a c0       	rjmp	.+52     	; 0x144 <keyfind+0xb2>
			}
			
			KEY_PRT = 0xBF;		/* check for pressed key in 3rd row */
 110:	8f eb       	ldi	r24, 0xBF	; 191
 112:	85 bb       	out	0x15, r24	; 21
			asm("NOP");
 114:	00 00       	nop
			colloc = (KEY_PIN & 0x0F);
 116:	83 b3       	in	r24, 0x13	; 19
 118:	8f 70       	andi	r24, 0x0F	; 15
 11a:	80 93 94 00 	sts	0x0094, r24	; 0x800094 <__data_end>
			if(colloc != 0x0F)
 11e:	8f 30       	cpi	r24, 0x0F	; 15
 120:	21 f0       	breq	.+8      	; 0x12a <keyfind+0x98>
			{
				rowloc = 2;
 122:	82 e0       	ldi	r24, 0x02	; 2
 124:	80 93 95 00 	sts	0x0095, r24	; 0x800095 <rowloc>
				break;
 128:	0d c0       	rjmp	.+26     	; 0x144 <keyfind+0xb2>
			}

			KEY_PRT = 0x7F;		/* check for pressed key in 4th row */
 12a:	8f e7       	ldi	r24, 0x7F	; 127
 12c:	85 bb       	out	0x15, r24	; 21
			asm("NOP");
 12e:	00 00       	nop
			colloc = (KEY_PIN & 0x0F);
 130:	83 b3       	in	r24, 0x13	; 19
 132:	8f 70       	andi	r24, 0x0F	; 15
 134:	80 93 94 00 	sts	0x0094, r24	; 0x800094 <__data_end>
			if(colloc != 0x0F)
 138:	8f 30       	cpi	r24, 0x0F	; 15
 13a:	09 f4       	brne	.+2      	; 0x13e <keyfind+0xac>
 13c:	aa cf       	rjmp	.-172    	; 0x92 <keyfind>
			{
				rowloc = 3;
 13e:	83 e0       	ldi	r24, 0x03	; 3
 140:	80 93 95 00 	sts	0x0095, r24	; 0x800095 <rowloc>
				break;
			}
		}

		if(colloc == 0x0E)
 144:	80 91 94 00 	lds	r24, 0x0094	; 0x800094 <__data_end>
 148:	8e 30       	cpi	r24, 0x0E	; 14
 14a:	59 f4       	brne	.+22     	; 0x162 <keyfind+0xd0>
		return(keypad[rowloc][0]);
 14c:	e0 91 95 00 	lds	r30, 0x0095	; 0x800095 <rowloc>
 150:	f0 e0       	ldi	r31, 0x00	; 0
 152:	ee 0f       	add	r30, r30
 154:	ff 1f       	adc	r31, r31
 156:	ee 0f       	add	r30, r30
 158:	ff 1f       	adc	r31, r31
 15a:	e0 5a       	subi	r30, 0xA0	; 160
 15c:	ff 4f       	sbci	r31, 0xFF	; 255
 15e:	80 81       	ld	r24, Z
 160:	08 95       	ret
		else if(colloc == 0x0D)
 162:	8d 30       	cpi	r24, 0x0D	; 13
 164:	59 f4       	brne	.+22     	; 0x17c <keyfind+0xea>
		return(keypad[rowloc][1]);
 166:	e0 91 95 00 	lds	r30, 0x0095	; 0x800095 <rowloc>
 16a:	f0 e0       	ldi	r31, 0x00	; 0
 16c:	ee 0f       	add	r30, r30
 16e:	ff 1f       	adc	r31, r31
 170:	ee 0f       	add	r30, r30
 172:	ff 1f       	adc	r31, r31
 174:	e0 5a       	subi	r30, 0xA0	; 160
 176:	ff 4f       	sbci	r31, 0xFF	; 255
 178:	81 81       	ldd	r24, Z+1	; 0x01
 17a:	08 95       	ret
		else if(colloc == 0x0B)
 17c:	8b 30       	cpi	r24, 0x0B	; 11
 17e:	59 f4       	brne	.+22     	; 0x196 <keyfind+0x104>
		return(keypad[rowloc][2]);
 180:	e0 91 95 00 	lds	r30, 0x0095	; 0x800095 <rowloc>
 184:	f0 e0       	ldi	r31, 0x00	; 0
 186:	ee 0f       	add	r30, r30
 188:	ff 1f       	adc	r31, r31
 18a:	ee 0f       	add	r30, r30
 18c:	ff 1f       	adc	r31, r31
 18e:	e0 5a       	subi	r30, 0xA0	; 160
 190:	ff 4f       	sbci	r31, 0xFF	; 255
 192:	82 81       	ldd	r24, Z+2	; 0x02
 194:	08 95       	ret
		else
		return(keypad[rowloc][3]);
 196:	e0 91 95 00 	lds	r30, 0x0095	; 0x800095 <rowloc>
 19a:	f0 e0       	ldi	r31, 0x00	; 0
 19c:	ee 0f       	add	r30, r30
 19e:	ff 1f       	adc	r31, r31
 1a0:	ee 0f       	add	r30, r30
 1a2:	ff 1f       	adc	r31, r31
 1a4:	e0 5a       	subi	r30, 0xA0	; 160
 1a6:	ff 4f       	sbci	r31, 0xFF	; 255
 1a8:	83 81       	ldd	r24, Z+3	; 0x03
 1aa:	08 95       	ret

000001ac <lcdcmd>:
	lcddata(data_value1);
}

void lcdcmd(char cmdout)
{
	PORTB=cmdout;
 1ac:	88 bb       	out	0x18, r24	; 24
	PORTB&=~(1<<rs);
 1ae:	88 b3       	in	r24, 0x18	; 24
 1b0:	8b 7f       	andi	r24, 0xFB	; 251
 1b2:	88 bb       	out	0x18, r24	; 24
	//PORTB&=~(1<<rw);
	PORTB|=(1<<en);
 1b4:	88 b3       	in	r24, 0x18	; 24
 1b6:	88 60       	ori	r24, 0x08	; 8
 1b8:	88 bb       	out	0x18, r24	; 24
 1ba:	89 ef       	ldi	r24, 0xF9	; 249
 1bc:	90 e0       	ldi	r25, 0x00	; 0
 1be:	01 97       	sbiw	r24, 0x01	; 1
 1c0:	f1 f7       	brne	.-4      	; 0x1be <lcdcmd+0x12>
 1c2:	00 c0       	rjmp	.+0      	; 0x1c4 <lcdcmd+0x18>
 1c4:	00 00       	nop
	_delay_ms(1);
	PORTB&=~(1<<en);
 1c6:	88 b3       	in	r24, 0x18	; 24
 1c8:	87 7f       	andi	r24, 0xF7	; 247
 1ca:	88 bb       	out	0x18, r24	; 24
 1cc:	08 95       	ret

000001ce <dis_cmd>:
	dis_cmd(0x06);
	//dis_cmd(0x83);
}

void dis_cmd(char cmd_value)
{
 1ce:	cf 93       	push	r28
 1d0:	c8 2f       	mov	r28, r24
	char cmd_value1;
	
	cmd_value1 = cmd_value & 0xF0;		//mask lower nibble because PA4-PA7 pins are used.
	lcdcmd(cmd_value1);			// send to LCD
 1d2:	80 7f       	andi	r24, 0xF0	; 240
 1d4:	0e 94 d6 00 	call	0x1ac	; 0x1ac <lcdcmd>
	
	cmd_value1 = ((cmd_value<<4) & 0xF0);	//shift 4-bit and mask
	lcdcmd(cmd_value1);			// send to LCD
 1d8:	8c 2f       	mov	r24, r28
 1da:	82 95       	swap	r24
 1dc:	80 7f       	andi	r24, 0xF0	; 240
 1de:	0e 94 d6 00 	call	0x1ac	; 0x1ac <lcdcmd>
}
 1e2:	cf 91       	pop	r28
 1e4:	08 95       	ret

000001e6 <lcd_init>:
#define en PB3


void lcd_init()	// function for initialize
{
	dis_cmd(0x02);		// to initialize LCD in 4-bit mode.
 1e6:	82 e0       	ldi	r24, 0x02	; 2
 1e8:	0e 94 e7 00 	call	0x1ce	; 0x1ce <dis_cmd>
	dis_cmd(0x28);
 1ec:	88 e2       	ldi	r24, 0x28	; 40
 1ee:	0e 94 e7 00 	call	0x1ce	; 0x1ce <dis_cmd>
	//dis_cmd(0x01);	                  	//to initialize LCD in 2 lines, 5X7 dots and 4bit mode.
	dis_cmd(0x0E);
 1f2:	8e e0       	ldi	r24, 0x0E	; 14
 1f4:	0e 94 e7 00 	call	0x1ce	; 0x1ce <dis_cmd>
	dis_cmd(0x06);
 1f8:	86 e0       	ldi	r24, 0x06	; 6
 1fa:	0e 94 e7 00 	call	0x1ce	; 0x1ce <dis_cmd>
 1fe:	08 95       	ret

00000200 <lcddata>:
	PORTB&=~(1<<en);
}

void lcddata(char dataout)
{
	PORTB=dataout;
 200:	88 bb       	out	0x18, r24	; 24
	PORTB|=(1<<rs);
 202:	88 b3       	in	r24, 0x18	; 24
 204:	84 60       	ori	r24, 0x04	; 4
 206:	88 bb       	out	0x18, r24	; 24
	//PORTB&=~(1<<rw);
	PORTB|=(1<<en);
 208:	88 b3       	in	r24, 0x18	; 24
 20a:	88 60       	ori	r24, 0x08	; 8
 20c:	88 bb       	out	0x18, r24	; 24
 20e:	89 ef       	ldi	r24, 0xF9	; 249
 210:	90 e0       	ldi	r25, 0x00	; 0
 212:	01 97       	sbiw	r24, 0x01	; 1
 214:	f1 f7       	brne	.-4      	; 0x212 <lcddata+0x12>
 216:	00 c0       	rjmp	.+0      	; 0x218 <lcddata+0x18>
 218:	00 00       	nop
	_delay_ms(1);
	PORTB&=~(1<<en);
 21a:	88 b3       	in	r24, 0x18	; 24
 21c:	87 7f       	andi	r24, 0xF7	; 247
 21e:	88 bb       	out	0x18, r24	; 24
 220:	08 95       	ret

00000222 <dis_data>:
	lcdcmd(cmd_value1);			// send to LCD
}


void dis_data(char data_value)
{
 222:	cf 93       	push	r28
 224:	c8 2f       	mov	r28, r24
	char data_value1;
	
	data_value1=data_value&0xF0;
	lcddata(data_value1);
 226:	80 7f       	andi	r24, 0xF0	; 240
 228:	0e 94 00 01 	call	0x200	; 0x200 <lcddata>
	
	data_value1=((data_value<<4)&0xF0);
	lcddata(data_value1);
 22c:	8c 2f       	mov	r24, r28
 22e:	82 95       	swap	r24
 230:	80 7f       	andi	r24, 0xF0	; 240
 232:	0e 94 00 01 	call	0x200	; 0x200 <lcddata>
}
 236:	cf 91       	pop	r28
 238:	08 95       	ret

0000023a <main>:

int num_trays = 0;
float vol = 0;

int main(void)
{
 23a:	0f 93       	push	r16
 23c:	1f 93       	push	r17
 23e:	cf 93       	push	r28
 240:	df 93       	push	r29
 242:	cd b7       	in	r28, 0x3d	; 61
 244:	de b7       	in	r29, 0x3e	; 62
 246:	a3 97       	sbiw	r28, 0x23	; 35
 248:	0f b6       	in	r0, 0x3f	; 63
 24a:	f8 94       	cli
 24c:	de bf       	out	0x3e, r29	; 62
 24e:	0f be       	out	0x3f, r0	; 63
 250:	cd bf       	out	0x3d, r28	; 61
	unsigned char data0[]="Number of trays?";
 252:	81 e1       	ldi	r24, 0x11	; 17
 254:	e0 e7       	ldi	r30, 0x70	; 112
 256:	f0 e0       	ldi	r31, 0x00	; 0
 258:	de 01       	movw	r26, r28
 25a:	11 96       	adiw	r26, 0x01	; 1
 25c:	01 90       	ld	r0, Z+
 25e:	0d 92       	st	X+, r0
 260:	8a 95       	dec	r24
 262:	e1 f7       	brne	.-8      	; 0x25c <main+0x22>
	unsigned char data1[]="Vol. of tray (L)?";
 264:	82 e1       	ldi	r24, 0x12	; 18
 266:	e1 e8       	ldi	r30, 0x81	; 129
 268:	f0 e0       	ldi	r31, 0x00	; 0
 26a:	de 01       	movw	r26, r28
 26c:	52 96       	adiw	r26, 0x12	; 18
 26e:	01 90       	ld	r0, Z+
 270:	0d 92       	st	X+, r0
 272:	8a 95       	dec	r24
 274:	e1 f7       	brne	.-8      	; 0x26e <main+0x34>
	
	int i=0,x;
	DDRB=0xFF;
 276:	8f ef       	ldi	r24, 0xFF	; 255
 278:	87 bb       	out	0x17, r24	; 23
	lcd_init();
 27a:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <lcd_init>
int main(void)
{
	unsigned char data0[]="Number of trays?";
	unsigned char data1[]="Vol. of tray (L)?";
	
	int i=0,x;
 27e:	00 e0       	ldi	r16, 0x00	; 0
 280:	10 e0       	ldi	r17, 0x00	; 0
	DDRB=0xFF;
	lcd_init();
	
	while(data0[i]!='\0')
 282:	0a c0       	rjmp	.+20     	; 0x298 <main+0x5e>
	{
		dis_data(data0[i]);
 284:	0e 94 11 01 	call	0x222	; 0x222 <dis_data>
 288:	8f e9       	ldi	r24, 0x9F	; 159
 28a:	9f e0       	ldi	r25, 0x0F	; 15
 28c:	01 97       	sbiw	r24, 0x01	; 1
 28e:	f1 f7       	brne	.-4      	; 0x28c <main+0x52>
 290:	00 c0       	rjmp	.+0      	; 0x292 <main+0x58>
 292:	00 00       	nop
		_delay_ms(10);
		i++;
 294:	0f 5f       	subi	r16, 0xFF	; 255
 296:	1f 4f       	sbci	r17, 0xFF	; 255
	
	int i=0,x;
	DDRB=0xFF;
	lcd_init();
	
	while(data0[i]!='\0')
 298:	e1 e0       	ldi	r30, 0x01	; 1
 29a:	f0 e0       	ldi	r31, 0x00	; 0
 29c:	ec 0f       	add	r30, r28
 29e:	fd 1f       	adc	r31, r29
 2a0:	e0 0f       	add	r30, r16
 2a2:	f1 1f       	adc	r31, r17
 2a4:	80 81       	ld	r24, Z
 2a6:	81 11       	cpse	r24, r1
 2a8:	ed cf       	rjmp	.-38     	; 0x284 <main+0x4a>
		dis_data(data0[i]);
		_delay_ms(10);
		i++;
	}
	
	dis_cmd(0xC0);
 2aa:	80 ec       	ldi	r24, 0xC0	; 192
 2ac:	0e 94 e7 00 	call	0x1ce	; 0x1ce <dis_cmd>
	
	char key;
	do 
	{
		key = keyfind();
 2b0:	0e 94 49 00 	call	0x92	; 0x92 <keyfind>
		if (key == ' ')
 2b4:	80 32       	cpi	r24, 0x20	; 32
 2b6:	79 f0       	breq	.+30     	; 0x2d6 <main+0x9c>
		{
			break;
		}else if (key == '=')
 2b8:	8d 33       	cpi	r24, 0x3D	; 61
 2ba:	51 f4       	brne	.+20     	; 0x2d0 <main+0x96>
		{
			dis_cmd(0x04);
 2bc:	84 e0       	ldi	r24, 0x04	; 4
 2be:	0e 94 e7 00 	call	0x1ce	; 0x1ce <dis_cmd>
			dis_data(' ');
 2c2:	80 e2       	ldi	r24, 0x20	; 32
 2c4:	0e 94 11 01 	call	0x222	; 0x222 <dis_data>
			dis_cmd(0x06);
 2c8:	86 e0       	ldi	r24, 0x06	; 6
 2ca:	0e 94 e7 00 	call	0x1ce	; 0x1ce <dis_cmd>
 2ce:	f0 cf       	rjmp	.-32     	; 0x2b0 <main+0x76>
		}else{
			dis_data(key);
 2d0:	0e 94 11 01 	call	0x222	; 0x222 <dis_data>
 2d4:	ed cf       	rjmp	.-38     	; 0x2b0 <main+0x76>
		}
		
				
	} while (1);
	
	dis_cmd(0x01);
 2d6:	81 e0       	ldi	r24, 0x01	; 1
 2d8:	0e 94 e7 00 	call	0x1ce	; 0x1ce <dis_cmd>
	dis_cmd(0x06);
 2dc:	86 e0       	ldi	r24, 0x06	; 6
 2de:	0e 94 e7 00 	call	0x1ce	; 0x1ce <dis_cmd>
	
	i=0;
 2e2:	00 e0       	ldi	r16, 0x00	; 0
 2e4:	10 e0       	ldi	r17, 0x00	; 0
	while(data1[i]!='\0')
 2e6:	0a c0       	rjmp	.+20     	; 0x2fc <main+0xc2>
	{
		dis_data(data1[i]);
 2e8:	0e 94 11 01 	call	0x222	; 0x222 <dis_data>
 2ec:	8f e9       	ldi	r24, 0x9F	; 159
 2ee:	9f e0       	ldi	r25, 0x0F	; 15
 2f0:	01 97       	sbiw	r24, 0x01	; 1
 2f2:	f1 f7       	brne	.-4      	; 0x2f0 <main+0xb6>
 2f4:	00 c0       	rjmp	.+0      	; 0x2f6 <main+0xbc>
 2f6:	00 00       	nop
		_delay_ms(10);
		i++;
 2f8:	0f 5f       	subi	r16, 0xFF	; 255
 2fa:	1f 4f       	sbci	r17, 0xFF	; 255
	
	dis_cmd(0x01);
	dis_cmd(0x06);
	
	i=0;
	while(data1[i]!='\0')
 2fc:	e2 e1       	ldi	r30, 0x12	; 18
 2fe:	f0 e0       	ldi	r31, 0x00	; 0
 300:	ec 0f       	add	r30, r28
 302:	fd 1f       	adc	r31, r29
 304:	e0 0f       	add	r30, r16
 306:	f1 1f       	adc	r31, r17
 308:	80 81       	ld	r24, Z
 30a:	81 11       	cpse	r24, r1
 30c:	ed cf       	rjmp	.-38     	; 0x2e8 <main+0xae>
			//dis_cmd(0x1c); 
			//_delay_ms(100);
		//}
	//}
	
}
 30e:	80 e0       	ldi	r24, 0x00	; 0
 310:	90 e0       	ldi	r25, 0x00	; 0
 312:	a3 96       	adiw	r28, 0x23	; 35
 314:	0f b6       	in	r0, 0x3f	; 63
 316:	f8 94       	cli
 318:	de bf       	out	0x3e, r29	; 62
 31a:	0f be       	out	0x3f, r0	; 63
 31c:	cd bf       	out	0x3d, r28	; 61
 31e:	df 91       	pop	r29
 320:	cf 91       	pop	r28
 322:	1f 91       	pop	r17
 324:	0f 91       	pop	r16
 326:	08 95       	ret

00000328 <_exit>:
 328:	f8 94       	cli

0000032a <__stop_program>:
 32a:	ff cf       	rjmp	.-2      	; 0x32a <__stop_program>
