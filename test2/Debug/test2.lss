
test2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000832  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000009e  00800060  00000832  000008c6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000008  008000fe  008000fe  00000964  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000964  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000994  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000090  00000000  00000000  000009d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000106a  00000000  00000000  00000a60  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006f6  00000000  00000000  00001aca  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000988  00000000  00000000  000021c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000130  00000000  00000000  00002b48  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003fa  00000000  00000000  00002c78  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000004bc  00000000  00000000  00003072  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000080  00000000  00000000  0000352e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 e3       	ldi	r30, 0x32	; 50
  68:	f8 e0       	ldi	r31, 0x08	; 8
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ae 3f       	cpi	r26, 0xFE	; 254
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	21 e0       	ldi	r18, 0x01	; 1
  78:	ae ef       	ldi	r26, 0xFE	; 254
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a6 30       	cpi	r26, 0x06	; 6
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <main>
  8a:	0c 94 17 04 	jmp	0x82e	; 0x82e <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <i2c_init>:
}

void lcd_lef_sh()
{
	lcd_cmd(0x18);      //----Command for Left Shift
	delay(200);
  92:	82 e6       	ldi	r24, 0x62	; 98
  94:	80 b9       	out	0x00, r24	; 0
  96:	84 e0       	ldi	r24, 0x04	; 4
  98:	86 bf       	out	0x36, r24	; 54
  9a:	11 b8       	out	0x01, r1	; 1
  9c:	08 95       	ret

0000009e <i2c_start>:
  9e:	84 ea       	ldi	r24, 0xA4	; 164
  a0:	86 bf       	out	0x36, r24	; 54
  a2:	06 b6       	in	r0, 0x36	; 54
  a4:	07 fe       	sbrs	r0, 7
  a6:	fd cf       	rjmp	.-6      	; 0xa2 <i2c_start+0x4>
  a8:	08 95       	ret

000000aa <i2c_write>:
  aa:	83 b9       	out	0x03, r24	; 3
  ac:	84 e8       	ldi	r24, 0x84	; 132
  ae:	86 bf       	out	0x36, r24	; 54
  b0:	06 b6       	in	r0, 0x36	; 54
  b2:	07 fe       	sbrs	r0, 7
  b4:	fd cf       	rjmp	.-6      	; 0xb0 <i2c_write+0x6>
  b6:	08 95       	ret

000000b8 <delay>:
  b8:	40 e0       	ldi	r20, 0x00	; 0
  ba:	50 e0       	ldi	r21, 0x00	; 0
  bc:	0a c0       	rjmp	.+20     	; 0xd2 <delay+0x1a>
  be:	2f 5f       	subi	r18, 0xFF	; 255
  c0:	3f 4f       	sbci	r19, 0xFF	; 255
  c2:	02 c0       	rjmp	.+4      	; 0xc8 <delay+0x10>
  c4:	20 e0       	ldi	r18, 0x00	; 0
  c6:	30 e0       	ldi	r19, 0x00	; 0
  c8:	29 37       	cpi	r18, 0x79	; 121
  ca:	31 05       	cpc	r19, r1
  cc:	c4 f3       	brlt	.-16     	; 0xbe <delay+0x6>
  ce:	4f 5f       	subi	r20, 0xFF	; 255
  d0:	5f 4f       	sbci	r21, 0xFF	; 255
  d2:	84 17       	cp	r24, r20
  d4:	95 07       	cpc	r25, r21
  d6:	b4 f7       	brge	.-20     	; 0xc4 <delay+0xc>
  d8:	08 95       	ret

000000da <toggle>:
  da:	83 b1       	in	r24, 0x03	; 3
  dc:	82 60       	ori	r24, 0x02	; 2
  de:	83 b9       	out	0x03, r24	; 3
  e0:	84 e8       	ldi	r24, 0x84	; 132
  e2:	86 bf       	out	0x36, r24	; 54
  e4:	06 b6       	in	r0, 0x36	; 54
  e6:	07 fe       	sbrs	r0, 7
  e8:	fd cf       	rjmp	.-6      	; 0xe4 <toggle+0xa>
  ea:	81 e0       	ldi	r24, 0x01	; 1
  ec:	90 e0       	ldi	r25, 0x00	; 0
  ee:	0e 94 5c 00 	call	0xb8	; 0xb8 <delay>
  f2:	83 b1       	in	r24, 0x03	; 3
  f4:	8d 7f       	andi	r24, 0xFD	; 253
  f6:	83 b9       	out	0x03, r24	; 3
  f8:	84 e8       	ldi	r24, 0x84	; 132
  fa:	86 bf       	out	0x36, r24	; 54
  fc:	06 b6       	in	r0, 0x36	; 54
  fe:	07 fe       	sbrs	r0, 7
 100:	fd cf       	rjmp	.-6      	; 0xfc <toggle+0x22>
 102:	08 95       	ret

00000104 <lcd_cmd_hf>:
 104:	93 b1       	in	r25, 0x03	; 3
 106:	9e 7f       	andi	r25, 0xFE	; 254
 108:	93 b9       	out	0x03, r25	; 3
 10a:	94 e8       	ldi	r25, 0x84	; 132
 10c:	96 bf       	out	0x36, r25	; 54
 10e:	06 b6       	in	r0, 0x36	; 54
 110:	07 fe       	sbrs	r0, 7
 112:	fd cf       	rjmp	.-6      	; 0x10e <lcd_cmd_hf+0xa>
 114:	93 b1       	in	r25, 0x03	; 3
 116:	9f 70       	andi	r25, 0x0F	; 15
 118:	93 b9       	out	0x03, r25	; 3
 11a:	94 e8       	ldi	r25, 0x84	; 132
 11c:	96 bf       	out	0x36, r25	; 54
 11e:	06 b6       	in	r0, 0x36	; 54
 120:	07 fe       	sbrs	r0, 7
 122:	fd cf       	rjmp	.-6      	; 0x11e <lcd_cmd_hf+0x1a>
 124:	93 b1       	in	r25, 0x03	; 3
 126:	80 7f       	andi	r24, 0xF0	; 240
 128:	89 2b       	or	r24, r25
 12a:	83 b9       	out	0x03, r24	; 3
 12c:	84 e8       	ldi	r24, 0x84	; 132
 12e:	86 bf       	out	0x36, r24	; 54
 130:	06 b6       	in	r0, 0x36	; 54
 132:	07 fe       	sbrs	r0, 7
 134:	fd cf       	rjmp	.-6      	; 0x130 <lcd_cmd_hf+0x2c>
 136:	0e 94 6d 00 	call	0xda	; 0xda <toggle>
 13a:	08 95       	ret

0000013c <lcd_cmd>:
 13c:	cf 93       	push	r28
 13e:	c8 2f       	mov	r28, r24
 140:	83 b1       	in	r24, 0x03	; 3
 142:	8e 7f       	andi	r24, 0xFE	; 254
 144:	83 b9       	out	0x03, r24	; 3
 146:	84 e8       	ldi	r24, 0x84	; 132
 148:	86 bf       	out	0x36, r24	; 54
 14a:	06 b6       	in	r0, 0x36	; 54
 14c:	07 fe       	sbrs	r0, 7
 14e:	fd cf       	rjmp	.-6      	; 0x14a <lcd_cmd+0xe>
 150:	83 b1       	in	r24, 0x03	; 3
 152:	8f 70       	andi	r24, 0x0F	; 15
 154:	83 b9       	out	0x03, r24	; 3
 156:	84 e8       	ldi	r24, 0x84	; 132
 158:	86 bf       	out	0x36, r24	; 54
 15a:	06 b6       	in	r0, 0x36	; 54
 15c:	07 fe       	sbrs	r0, 7
 15e:	fd cf       	rjmp	.-6      	; 0x15a <lcd_cmd+0x1e>
 160:	83 b1       	in	r24, 0x03	; 3
 162:	9c 2f       	mov	r25, r28
 164:	90 7f       	andi	r25, 0xF0	; 240
 166:	89 2b       	or	r24, r25
 168:	83 b9       	out	0x03, r24	; 3
 16a:	84 e8       	ldi	r24, 0x84	; 132
 16c:	86 bf       	out	0x36, r24	; 54
 16e:	06 b6       	in	r0, 0x36	; 54
 170:	07 fe       	sbrs	r0, 7
 172:	fd cf       	rjmp	.-6      	; 0x16e <lcd_cmd+0x32>
 174:	0e 94 6d 00 	call	0xda	; 0xda <toggle>
 178:	83 b1       	in	r24, 0x03	; 3
 17a:	8f 70       	andi	r24, 0x0F	; 15
 17c:	83 b9       	out	0x03, r24	; 3
 17e:	84 e8       	ldi	r24, 0x84	; 132
 180:	86 bf       	out	0x36, r24	; 54
 182:	06 b6       	in	r0, 0x36	; 54
 184:	07 fe       	sbrs	r0, 7
 186:	fd cf       	rjmp	.-6      	; 0x182 <lcd_cmd+0x46>
 188:	23 b1       	in	r18, 0x03	; 3
 18a:	30 e1       	ldi	r19, 0x10	; 16
 18c:	c3 9f       	mul	r28, r19
 18e:	c0 01       	movw	r24, r0
 190:	11 24       	eor	r1, r1
 192:	82 2b       	or	r24, r18
 194:	83 b9       	out	0x03, r24	; 3
 196:	84 e8       	ldi	r24, 0x84	; 132
 198:	86 bf       	out	0x36, r24	; 54
 19a:	06 b6       	in	r0, 0x36	; 54
 19c:	07 fe       	sbrs	r0, 7
 19e:	fd cf       	rjmp	.-6      	; 0x19a <lcd_cmd+0x5e>
 1a0:	0e 94 6d 00 	call	0xda	; 0xda <toggle>
 1a4:	cf 91       	pop	r28
 1a6:	08 95       	ret

000001a8 <lcd_init>:
 1a8:	80 e3       	ldi	r24, 0x30	; 48
 1aa:	0e 94 82 00 	call	0x104	; 0x104 <lcd_cmd_hf>
 1ae:	80 e3       	ldi	r24, 0x30	; 48
 1b0:	0e 94 82 00 	call	0x104	; 0x104 <lcd_cmd_hf>
 1b4:	80 e2       	ldi	r24, 0x20	; 32
 1b6:	0e 94 82 00 	call	0x104	; 0x104 <lcd_cmd_hf>
 1ba:	88 e2       	ldi	r24, 0x28	; 40
 1bc:	0e 94 9e 00 	call	0x13c	; 0x13c <lcd_cmd>
 1c0:	8c e0       	ldi	r24, 0x0C	; 12
 1c2:	0e 94 9e 00 	call	0x13c	; 0x13c <lcd_cmd>
 1c6:	81 e0       	ldi	r24, 0x01	; 1
 1c8:	0e 94 9e 00 	call	0x13c	; 0x13c <lcd_cmd>
 1cc:	86 e0       	ldi	r24, 0x06	; 6
 1ce:	0e 94 9e 00 	call	0x13c	; 0x13c <lcd_cmd>
 1d2:	80 e8       	ldi	r24, 0x80	; 128
 1d4:	0e 94 9e 00 	call	0x13c	; 0x13c <lcd_cmd>
 1d8:	08 95       	ret

000001da <lcd_dwr>:
 1da:	cf 93       	push	r28
 1dc:	c8 2f       	mov	r28, r24
 1de:	83 b1       	in	r24, 0x03	; 3
 1e0:	81 60       	ori	r24, 0x01	; 1
 1e2:	83 b9       	out	0x03, r24	; 3
 1e4:	84 e8       	ldi	r24, 0x84	; 132
 1e6:	86 bf       	out	0x36, r24	; 54
 1e8:	06 b6       	in	r0, 0x36	; 54
 1ea:	07 fe       	sbrs	r0, 7
 1ec:	fd cf       	rjmp	.-6      	; 0x1e8 <lcd_dwr+0xe>
 1ee:	83 b1       	in	r24, 0x03	; 3
 1f0:	8f 70       	andi	r24, 0x0F	; 15
 1f2:	83 b9       	out	0x03, r24	; 3
 1f4:	84 e8       	ldi	r24, 0x84	; 132
 1f6:	86 bf       	out	0x36, r24	; 54
 1f8:	06 b6       	in	r0, 0x36	; 54
 1fa:	07 fe       	sbrs	r0, 7
 1fc:	fd cf       	rjmp	.-6      	; 0x1f8 <lcd_dwr+0x1e>
 1fe:	83 b1       	in	r24, 0x03	; 3
 200:	9c 2f       	mov	r25, r28
 202:	90 7f       	andi	r25, 0xF0	; 240
 204:	89 2b       	or	r24, r25
 206:	83 b9       	out	0x03, r24	; 3
 208:	84 e8       	ldi	r24, 0x84	; 132
 20a:	86 bf       	out	0x36, r24	; 54
 20c:	06 b6       	in	r0, 0x36	; 54
 20e:	07 fe       	sbrs	r0, 7
 210:	fd cf       	rjmp	.-6      	; 0x20c <lcd_dwr+0x32>
 212:	0e 94 6d 00 	call	0xda	; 0xda <toggle>
 216:	83 b1       	in	r24, 0x03	; 3
 218:	8f 70       	andi	r24, 0x0F	; 15
 21a:	83 b9       	out	0x03, r24	; 3
 21c:	84 e8       	ldi	r24, 0x84	; 132
 21e:	86 bf       	out	0x36, r24	; 54
 220:	06 b6       	in	r0, 0x36	; 54
 222:	07 fe       	sbrs	r0, 7
 224:	fd cf       	rjmp	.-6      	; 0x220 <lcd_dwr+0x46>
 226:	23 b1       	in	r18, 0x03	; 3
 228:	30 e1       	ldi	r19, 0x10	; 16
 22a:	c3 9f       	mul	r28, r19
 22c:	c0 01       	movw	r24, r0
 22e:	11 24       	eor	r1, r1
 230:	82 2b       	or	r24, r18
 232:	83 b9       	out	0x03, r24	; 3
 234:	84 e8       	ldi	r24, 0x84	; 132
 236:	86 bf       	out	0x36, r24	; 54
 238:	06 b6       	in	r0, 0x36	; 54
 23a:	07 fe       	sbrs	r0, 7
 23c:	fd cf       	rjmp	.-6      	; 0x238 <lcd_dwr+0x5e>
 23e:	0e 94 6d 00 	call	0xda	; 0xda <toggle>
 242:	cf 91       	pop	r28
 244:	08 95       	ret

00000246 <lcd_msg>:
 246:	cf 93       	push	r28
 248:	df 93       	push	r29
 24a:	ec 01       	movw	r28, r24
 24c:	03 c0       	rjmp	.+6      	; 0x254 <lcd_msg+0xe>
 24e:	21 96       	adiw	r28, 0x01	; 1
 250:	0e 94 ed 00 	call	0x1da	; 0x1da <lcd_dwr>
 254:	88 81       	ld	r24, Y
 256:	81 11       	cpse	r24, r1
 258:	fa cf       	rjmp	.-12     	; 0x24e <lcd_msg+0x8>
 25a:	df 91       	pop	r29
 25c:	cf 91       	pop	r28
 25e:	08 95       	ret

00000260 <keyfind>:

char* keyfind()
{
	while(1)
	{
		KEY_DDR = 0xF0;           /*  port direction  */
 260:	80 ef       	ldi	r24, 0xF0	; 240
 262:	81 bb       	out	0x11, r24	; 17
		KEY_PRT = 0xFF;			  /*  activate pull up resistors of pins  */
 264:	8f ef       	ldi	r24, 0xFF	; 255
 266:	82 bb       	out	0x12, r24	; 18

		do
		{
			KEY_PRT = 0x0F; 	/*  activate pull up registers of last 4 pins  */
 268:	8f e0       	ldi	r24, 0x0F	; 15
 26a:	82 bb       	out	0x12, r24	; 18
			asm("NOP");
 26c:	00 00       	nop
			colloc = (KEY_PIN & 0x0F); /* read status of column */
 26e:	80 b3       	in	r24, 0x10	; 16
 270:	8f 70       	andi	r24, 0x0F	; 15
 272:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <colloc>
		}while(colloc != 0x0F);
 276:	8f 30       	cpi	r24, 0x0F	; 15
 278:	b9 f7       	brne	.-18     	; 0x268 <keyfind+0x8>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 27a:	87 e8       	ldi	r24, 0x87	; 135
 27c:	93 e1       	ldi	r25, 0x13	; 19
 27e:	01 97       	sbiw	r24, 0x01	; 1
 280:	f1 f7       	brne	.-4      	; 0x27e <keyfind+0x1e>
 282:	00 c0       	rjmp	.+0      	; 0x284 <keyfind+0x24>
 284:	00 00       	nop
		{
			
			do
			{
				_delay_ms(20);             /* 20ms key debounce time */
				colloc = (KEY_PIN & 0x0F); /* read status of column */
 286:	80 b3       	in	r24, 0x10	; 16
 288:	8f 70       	andi	r24, 0x0F	; 15
 28a:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <colloc>
				
				}while(colloc == 0x0F);        /* check for any key press */
 28e:	8f 30       	cpi	r24, 0x0F	; 15
 290:	a1 f3       	breq	.-24     	; 0x27a <keyfind+0x1a>
 292:	8f e0       	ldi	r24, 0x0F	; 15
 294:	97 e2       	ldi	r25, 0x27	; 39
 296:	01 97       	sbiw	r24, 0x01	; 1
 298:	f1 f7       	brne	.-4      	; 0x296 <keyfind+0x36>
 29a:	00 c0       	rjmp	.+0      	; 0x29c <keyfind+0x3c>
 29c:	00 00       	nop
				
				
				_delay_ms (40);	            /* 20 ms key debounce time */
				colloc = (KEY_PIN & 0x0F);
 29e:	80 b3       	in	r24, 0x10	; 16
 2a0:	8f 70       	andi	r24, 0x0F	; 15
 2a2:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <colloc>
				
			}while(colloc == 0x0F);
 2a6:	8f 30       	cpi	r24, 0x0F	; 15
 2a8:	41 f3       	breq	.-48     	; 0x27a <keyfind+0x1a>

			/* now check for rows */
			KEY_PRT = 0xEF;        /* check for pressed key in 1st row */
 2aa:	8f ee       	ldi	r24, 0xEF	; 239
 2ac:	82 bb       	out	0x12, r24	; 18
			asm("NOP");
 2ae:	00 00       	nop
			colloc = (KEY_PIN & 0x0F);
 2b0:	80 b3       	in	r24, 0x10	; 16
 2b2:	8f 70       	andi	r24, 0x0F	; 15
 2b4:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <colloc>
			if(colloc != 0x0F)
 2b8:	8f 30       	cpi	r24, 0x0F	; 15
 2ba:	19 f0       	breq	.+6      	; 0x2c2 <keyfind+0x62>
			{
				rowloc = 0;
 2bc:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <rowloc>
				break;
 2c0:	27 c0       	rjmp	.+78     	; 0x310 <keyfind+0xb0>
			}

			KEY_PRT = 0xDF;		/* check for pressed key in 2nd row */
 2c2:	8f ed       	ldi	r24, 0xDF	; 223
 2c4:	82 bb       	out	0x12, r24	; 18
			asm("NOP");
 2c6:	00 00       	nop
			colloc = (KEY_PIN & 0x0F);
 2c8:	80 b3       	in	r24, 0x10	; 16
 2ca:	8f 70       	andi	r24, 0x0F	; 15
 2cc:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <colloc>
			if(colloc != 0x0F)
 2d0:	8f 30       	cpi	r24, 0x0F	; 15
 2d2:	21 f0       	breq	.+8      	; 0x2dc <keyfind+0x7c>
			{
				rowloc = 1;
 2d4:	81 e0       	ldi	r24, 0x01	; 1
 2d6:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <rowloc>
				break;
 2da:	1a c0       	rjmp	.+52     	; 0x310 <keyfind+0xb0>
			}
			
			KEY_PRT = 0xBF;		/* check for pressed key in 3rd row */
 2dc:	8f eb       	ldi	r24, 0xBF	; 191
 2de:	82 bb       	out	0x12, r24	; 18
			asm("NOP");
 2e0:	00 00       	nop
			colloc = (KEY_PIN & 0x0F);
 2e2:	80 b3       	in	r24, 0x10	; 16
 2e4:	8f 70       	andi	r24, 0x0F	; 15
 2e6:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <colloc>
			if(colloc != 0x0F)
 2ea:	8f 30       	cpi	r24, 0x0F	; 15
 2ec:	21 f0       	breq	.+8      	; 0x2f6 <keyfind+0x96>
			{
				rowloc = 2;
 2ee:	82 e0       	ldi	r24, 0x02	; 2
 2f0:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <rowloc>
				break;
 2f4:	0d c0       	rjmp	.+26     	; 0x310 <keyfind+0xb0>
			}

			KEY_PRT = 0x7F;		/* check for pressed key in 4th row */
 2f6:	8f e7       	ldi	r24, 0x7F	; 127
 2f8:	82 bb       	out	0x12, r24	; 18
			asm("NOP");
 2fa:	00 00       	nop
			colloc = (KEY_PIN & 0x0F);
 2fc:	80 b3       	in	r24, 0x10	; 16
 2fe:	8f 70       	andi	r24, 0x0F	; 15
 300:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <colloc>
			if(colloc != 0x0F)
 304:	8f 30       	cpi	r24, 0x0F	; 15
 306:	09 f4       	brne	.+2      	; 0x30a <keyfind+0xaa>
 308:	ab cf       	rjmp	.-170    	; 0x260 <keyfind>
			{
				rowloc = 3;
 30a:	83 e0       	ldi	r24, 0x03	; 3
 30c:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <rowloc>
				break;
			}
		}

		if(colloc == 0x0E){
 310:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <colloc>
 314:	9e 30       	cpi	r25, 0x0E	; 14
 316:	91 f4       	brne	.+36     	; 0x33c <keyfind+0xdc>
			switch (rowloc){
 318:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <rowloc>
 31c:	81 30       	cpi	r24, 0x01	; 1
 31e:	09 f4       	brne	.+2      	; 0x322 <keyfind+0xc2>
 320:	52 c0       	rjmp	.+164    	; 0x3c6 <keyfind+0x166>
 322:	08 f4       	brcc	.+2      	; 0x326 <keyfind+0xc6>
 324:	4d c0       	rjmp	.+154    	; 0x3c0 <keyfind+0x160>
 326:	82 30       	cpi	r24, 0x02	; 2
 328:	19 f0       	breq	.+6      	; 0x330 <keyfind+0xd0>
 32a:	83 30       	cpi	r24, 0x03	; 3
 32c:	21 f0       	breq	.+8      	; 0x336 <keyfind+0xd6>
 32e:	06 c0       	rjmp	.+12     	; 0x33c <keyfind+0xdc>
				case  0:
				return "7";
				case  1:
				return "4";
				case  2:
				return "1";
 330:	24 e6       	ldi	r18, 0x64	; 100
 332:	30 e0       	ldi	r19, 0x00	; 0
 334:	53 c0       	rjmp	.+166    	; 0x3dc <keyfind+0x17c>
				case  3:
				return " ";
 336:	26 e6       	ldi	r18, 0x66	; 102
 338:	30 e0       	ldi	r19, 0x00	; 0
 33a:	50 c0       	rjmp	.+160    	; 0x3dc <keyfind+0x17c>
				
			}
		}
		if(colloc == 0x0D){
 33c:	9d 30       	cpi	r25, 0x0D	; 13
 33e:	a1 f4       	brne	.+40     	; 0x368 <keyfind+0x108>
			switch (rowloc){
 340:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <rowloc>
 344:	81 30       	cpi	r24, 0x01	; 1
 346:	09 f4       	brne	.+2      	; 0x34a <keyfind+0xea>
 348:	41 c0       	rjmp	.+130    	; 0x3cc <keyfind+0x16c>
 34a:	28 f0       	brcs	.+10     	; 0x356 <keyfind+0xf6>
 34c:	82 30       	cpi	r24, 0x02	; 2
 34e:	31 f0       	breq	.+12     	; 0x35c <keyfind+0xfc>
 350:	83 30       	cpi	r24, 0x03	; 3
 352:	39 f0       	breq	.+14     	; 0x362 <keyfind+0x102>
 354:	34 c0       	rjmp	.+104    	; 0x3be <keyfind+0x15e>
				case  0:
				return "8";
 356:	28 e6       	ldi	r18, 0x68	; 104
 358:	30 e0       	ldi	r19, 0x00	; 0
 35a:	40 c0       	rjmp	.+128    	; 0x3dc <keyfind+0x17c>
				case  1:
				return "5";
				case  2:
				return "2";
 35c:	2c e6       	ldi	r18, 0x6C	; 108
 35e:	30 e0       	ldi	r19, 0x00	; 0
 360:	3d c0       	rjmp	.+122    	; 0x3dc <keyfind+0x17c>
				case  3:
				return "0";
 362:	26 e9       	ldi	r18, 0x96	; 150
 364:	30 e0       	ldi	r19, 0x00	; 0
 366:	3a c0       	rjmp	.+116    	; 0x3dc <keyfind+0x17c>
				
			}
		}
		else if(colloc == 0x0B){
 368:	9b 30       	cpi	r25, 0x0B	; 11
 36a:	99 f4       	brne	.+38     	; 0x392 <keyfind+0x132>
			switch (rowloc){
 36c:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <rowloc>
 370:	81 30       	cpi	r24, 0x01	; 1
 372:	79 f1       	breq	.+94     	; 0x3d2 <keyfind+0x172>
 374:	28 f0       	brcs	.+10     	; 0x380 <keyfind+0x120>
 376:	82 30       	cpi	r24, 0x02	; 2
 378:	31 f0       	breq	.+12     	; 0x386 <keyfind+0x126>
 37a:	83 30       	cpi	r24, 0x03	; 3
 37c:	39 f0       	breq	.+14     	; 0x38c <keyfind+0x12c>
 37e:	1f c0       	rjmp	.+62     	; 0x3be <keyfind+0x15e>
				case  0:
				return "9";
 380:	2e e6       	ldi	r18, 0x6E	; 110
 382:	30 e0       	ldi	r19, 0x00	; 0
 384:	2b c0       	rjmp	.+86     	; 0x3dc <keyfind+0x17c>
				case  1:
				return "6";
				case  2:
				return "3";
 386:	22 e7       	ldi	r18, 0x72	; 114
 388:	30 e0       	ldi	r19, 0x00	; 0
 38a:	28 c0       	rjmp	.+80     	; 0x3dc <keyfind+0x17c>
				case  3:
				return "=";
 38c:	24 e7       	ldi	r18, 0x74	; 116
 38e:	30 e0       	ldi	r19, 0x00	; 0
 390:	25 c0       	rjmp	.+74     	; 0x3dc <keyfind+0x17c>
				
			}
		}
		else{
			switch (rowloc){
 392:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <rowloc>
 396:	81 30       	cpi	r24, 0x01	; 1
 398:	f9 f0       	breq	.+62     	; 0x3d8 <keyfind+0x178>
 39a:	28 f0       	brcs	.+10     	; 0x3a6 <keyfind+0x146>
 39c:	82 30       	cpi	r24, 0x02	; 2
 39e:	31 f0       	breq	.+12     	; 0x3ac <keyfind+0x14c>
 3a0:	83 30       	cpi	r24, 0x03	; 3
 3a2:	39 f0       	breq	.+14     	; 0x3b2 <keyfind+0x152>
 3a4:	09 c0       	rjmp	.+18     	; 0x3b8 <keyfind+0x158>
				case  0:
				return "/";
 3a6:	26 e7       	ldi	r18, 0x76	; 118
 3a8:	30 e0       	ldi	r19, 0x00	; 0
 3aa:	18 c0       	rjmp	.+48     	; 0x3dc <keyfind+0x17c>
				case  1:
				return "x";
				case  2:
				return "-";
 3ac:	2a e7       	ldi	r18, 0x7A	; 122
 3ae:	30 e0       	ldi	r19, 0x00	; 0
 3b0:	15 c0       	rjmp	.+42     	; 0x3dc <keyfind+0x17c>
				case  3:
				return "+";
 3b2:	2c e7       	ldi	r18, 0x7C	; 124
 3b4:	30 e0       	ldi	r19, 0x00	; 0
 3b6:	12 c0       	rjmp	.+36     	; 0x3dc <keyfind+0x17c>
				default:
				return "";
 3b8:	27 e6       	ldi	r18, 0x67	; 103
 3ba:	30 e0       	ldi	r19, 0x00	; 0
 3bc:	0f c0       	rjmp	.+30     	; 0x3dc <keyfind+0x17c>
				
			}
		}
 3be:	08 95       	ret
		}

		if(colloc == 0x0E){
			switch (rowloc){
				case  0:
				return "7";
 3c0:	20 e6       	ldi	r18, 0x60	; 96
 3c2:	30 e0       	ldi	r19, 0x00	; 0
 3c4:	0b c0       	rjmp	.+22     	; 0x3dc <keyfind+0x17c>
				case  1:
				return "4";
 3c6:	22 e6       	ldi	r18, 0x62	; 98
 3c8:	30 e0       	ldi	r19, 0x00	; 0
 3ca:	08 c0       	rjmp	.+16     	; 0x3dc <keyfind+0x17c>
		if(colloc == 0x0D){
			switch (rowloc){
				case  0:
				return "8";
				case  1:
				return "5";
 3cc:	2a e6       	ldi	r18, 0x6A	; 106
 3ce:	30 e0       	ldi	r19, 0x00	; 0
 3d0:	05 c0       	rjmp	.+10     	; 0x3dc <keyfind+0x17c>
		else if(colloc == 0x0B){
			switch (rowloc){
				case  0:
				return "9";
				case  1:
				return "6";
 3d2:	20 e7       	ldi	r18, 0x70	; 112
 3d4:	30 e0       	ldi	r19, 0x00	; 0
 3d6:	02 c0       	rjmp	.+4      	; 0x3dc <keyfind+0x17c>
		else{
			switch (rowloc){
				case  0:
				return "/";
				case  1:
				return "x";
 3d8:	28 e7       	ldi	r18, 0x78	; 120
 3da:	30 e0       	ldi	r19, 0x00	; 0
 3dc:	82 2f       	mov	r24, r18
 3de:	93 2f       	mov	r25, r19
				default:
				return "";
				
			}
		}
 3e0:	08 95       	ret

000003e2 <main>:

//Global Variable
int num_trays = 0;
float vol = 0;

int main(void){
 3e2:	cf 93       	push	r28
 3e4:	df 93       	push	r29
 3e6:	cd b7       	in	r28, 0x3d	; 61
 3e8:	de b7       	in	r29, 0x3e	; 62
 3ea:	64 97       	sbiw	r28, 0x14	; 20
 3ec:	0f b6       	in	r0, 0x3f	; 63
 3ee:	f8 94       	cli
 3f0:	de bf       	out	0x3e, r29	; 62
 3f2:	0f be       	out	0x3f, r0	; 63
 3f4:	cd bf       	out	0x3d, r28	; 61
	
	/*---Function for initializing the i2c module
	and the LCD Display---*/
	i2c_init();
 3f6:	0e 94 49 00 	call	0x92	; 0x92 <i2c_init>
	i2c_start();
 3fa:	0e 94 4f 00 	call	0x9e	; 0x9e <i2c_start>
	i2c_write(0x70);
 3fe:	80 e7       	ldi	r24, 0x70	; 112
 400:	0e 94 55 00 	call	0xaa	; 0xaa <i2c_write>
	lcd_init();
 404:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <lcd_init>
	
	//Main Program Loop
	while(1){
		//Displaying the starting information
		lcd_cmd(0x80);
 408:	80 e8       	ldi	r24, 0x80	; 128
 40a:	0e 94 9e 00 	call	0x13c	; 0x13c <lcd_cmd>
		lcd_msg("Rubber Solution Mixer 1.0");
 40e:	8e e7       	ldi	r24, 0x7E	; 126
 410:	90 e0       	ldi	r25, 0x00	; 0
 412:	0e 94 23 01 	call	0x246	; 0x246 <lcd_msg>
		lcd_cmd(0xC0);
 416:	80 ec       	ldi	r24, 0xC0	; 192
 418:	0e 94 9e 00 	call	0x13c	; 0x13c <lcd_cmd>
		lcd_cmd(0x14);
 41c:	84 e1       	ldi	r24, 0x14	; 20
 41e:	0e 94 9e 00 	call	0x13c	; 0x13c <lcd_cmd>
		lcd_cmd(0x14);
 422:	84 e1       	ldi	r24, 0x14	; 20
 424:	0e 94 9e 00 	call	0x13c	; 0x13c <lcd_cmd>
		lcd_cmd(0x14);
 428:	84 e1       	ldi	r24, 0x14	; 20
 42a:	0e 94 9e 00 	call	0x13c	; 0x13c <lcd_cmd>
		lcd_cmd(0x14);
 42e:	84 e1       	ldi	r24, 0x14	; 20
 430:	0e 94 9e 00 	call	0x13c	; 0x13c <lcd_cmd>
		lcd_msg("Welcome");
 434:	88 e9       	ldi	r24, 0x98	; 152
 436:	90 e0       	ldi	r25, 0x00	; 0
 438:	0e 94 23 01 	call	0x246	; 0x246 <lcd_msg>
 43c:	2f e9       	ldi	r18, 0x9F	; 159
 43e:	86 e8       	ldi	r24, 0x86	; 134
 440:	91 e0       	ldi	r25, 0x01	; 1
 442:	21 50       	subi	r18, 0x01	; 1
 444:	80 40       	sbci	r24, 0x00	; 0
 446:	90 40       	sbci	r25, 0x00	; 0
 448:	e1 f7       	brne	.-8      	; 0x442 <__EEPROM_REGION_LENGTH__+0x42>
 44a:	00 c0       	rjmp	.+0      	; 0x44c <__EEPROM_REGION_LENGTH__+0x4c>
 44c:	00 00       	nop
		_delay_ms(500);
		for(int i = 0; i<27 ; i++)
 44e:	00 e0       	ldi	r16, 0x00	; 0
 450:	10 e0       	ldi	r17, 0x00	; 0
 452:	0b c0       	rjmp	.+22     	; 0x46a <__EEPROM_REGION_LENGTH__+0x6a>
		{
			lcd_cmd(0x18);
 454:	88 e1       	ldi	r24, 0x18	; 24
 456:	0e 94 9e 00 	call	0x13c	; 0x13c <lcd_cmd>
 45a:	87 ea       	ldi	r24, 0xA7	; 167
 45c:	91 e6       	ldi	r25, 0x61	; 97
 45e:	01 97       	sbiw	r24, 0x01	; 1
 460:	f1 f7       	brne	.-4      	; 0x45e <__EEPROM_REGION_LENGTH__+0x5e>
 462:	00 c0       	rjmp	.+0      	; 0x464 <__EEPROM_REGION_LENGTH__+0x64>
 464:	00 00       	nop
		lcd_cmd(0x14);
		lcd_cmd(0x14);
		lcd_cmd(0x14);
		lcd_msg("Welcome");
		_delay_ms(500);
		for(int i = 0; i<27 ; i++)
 466:	0f 5f       	subi	r16, 0xFF	; 255
 468:	1f 4f       	sbci	r17, 0xFF	; 255
 46a:	0b 31       	cpi	r16, 0x1B	; 27
 46c:	11 05       	cpc	r17, r1
 46e:	94 f3       	brlt	.-28     	; 0x454 <__EEPROM_REGION_LENGTH__+0x54>
		}
		
		//Getting the user input for the number of trays
		redo_trays:
		
		lcd_cmd(0x01);
 470:	81 e0       	ldi	r24, 0x01	; 1
 472:	0e 94 9e 00 	call	0x13c	; 0x13c <lcd_cmd>
		lcd_cmd(0x80);
 476:	80 e8       	ldi	r24, 0x80	; 128
 478:	0e 94 9e 00 	call	0x13c	; 0x13c <lcd_cmd>
		lcd_msg("Number of trays?");
 47c:	80 ea       	ldi	r24, 0xA0	; 160
 47e:	90 e0       	ldi	r25, 0x00	; 0
 480:	0e 94 23 01 	call	0x246	; 0x246 <lcd_msg>
		lcd_cmd(0xC0);
 484:	80 ec       	ldi	r24, 0xC0	; 192
 486:	0e 94 9e 00 	call	0x13c	; 0x13c <lcd_cmd>
		lcd_cmd(0x0F);
 48a:	8f e0       	ldi	r24, 0x0F	; 15
 48c:	0e 94 9e 00 	call	0x13c	; 0x13c <lcd_cmd>
		
		char temp[10];
		char str[10];
		int digs=0;
 490:	00 e0       	ldi	r16, 0x00	; 0
 492:	10 e0       	ldi	r17, 0x00	; 0
		do
		{
			strcpy(temp,keyfind());
 494:	0e 94 30 01 	call	0x260	; 0x260 <keyfind>
 498:	bc 01       	movw	r22, r24
 49a:	ce 01       	movw	r24, r28
 49c:	0b 96       	adiw	r24, 0x0b	; 11
 49e:	0e 94 08 04 	call	0x810	; 0x810 <strcpy>
			
			if (strcmp (temp, "=")==0){
 4a2:	64 e7       	ldi	r22, 0x74	; 116
 4a4:	70 e0       	ldi	r23, 0x00	; 0
 4a6:	ce 01       	movw	r24, r28
 4a8:	0b 96       	adiw	r24, 0x0b	; 11
 4aa:	0e 94 ff 03 	call	0x7fe	; 0x7fe <strcmp>
 4ae:	89 2b       	or	r24, r25
 4b0:	01 f5       	brne	.+64     	; 0x4f2 <__EEPROM_REGION_LENGTH__+0xf2>
				if (digs>=1)
 4b2:	10 16       	cp	r1, r16
 4b4:	11 06       	cpc	r1, r17
 4b6:	74 f5       	brge	.+92     	; 0x514 <__EEPROM_REGION_LENGTH__+0x114>
				{
					lcd_cmd(0x10);
 4b8:	80 e1       	ldi	r24, 0x10	; 16
 4ba:	0e 94 9e 00 	call	0x13c	; 0x13c <lcd_cmd>
					lcd_msg(" ");
 4be:	86 e6       	ldi	r24, 0x66	; 102
 4c0:	90 e0       	ldi	r25, 0x00	; 0
 4c2:	0e 94 23 01 	call	0x246	; 0x246 <lcd_msg>
					lcd_cmd(0x10);
 4c6:	80 e1       	ldi	r24, 0x10	; 16
 4c8:	0e 94 9e 00 	call	0x13c	; 0x13c <lcd_cmd>
					lcd_cmd(0x10);
 4cc:	80 e1       	ldi	r24, 0x10	; 16
 4ce:	0e 94 9e 00 	call	0x13c	; 0x13c <lcd_cmd>
					lcd_cmd(0x14);
 4d2:	84 e1       	ldi	r24, 0x14	; 20
 4d4:	0e 94 9e 00 	call	0x13c	; 0x13c <lcd_cmd>
					digs--;
 4d8:	01 50       	subi	r16, 0x01	; 1
 4da:	11 09       	sbc	r17, r1
					strcpy(&str[digs]," ");
 4dc:	e1 e0       	ldi	r30, 0x01	; 1
 4de:	f0 e0       	ldi	r31, 0x00	; 0
 4e0:	ec 0f       	add	r30, r28
 4e2:	fd 1f       	adc	r31, r29
 4e4:	e0 0f       	add	r30, r16
 4e6:	f1 1f       	adc	r31, r17
 4e8:	80 e2       	ldi	r24, 0x20	; 32
 4ea:	90 e0       	ldi	r25, 0x00	; 0
 4ec:	91 83       	std	Z+1, r25	; 0x01
 4ee:	80 83       	st	Z, r24
				}
				continue;
 4f0:	11 c0       	rjmp	.+34     	; 0x514 <__EEPROM_REGION_LENGTH__+0x114>
			}
			lcd_msg(temp);
 4f2:	ce 01       	movw	r24, r28
 4f4:	0b 96       	adiw	r24, 0x0b	; 11
 4f6:	0e 94 23 01 	call	0x246	; 0x246 <lcd_msg>
			strcpy(&str[digs],temp);
 4fa:	be 01       	movw	r22, r28
 4fc:	65 5f       	subi	r22, 0xF5	; 245
 4fe:	7f 4f       	sbci	r23, 0xFF	; 255
 500:	81 e0       	ldi	r24, 0x01	; 1
 502:	90 e0       	ldi	r25, 0x00	; 0
 504:	8c 0f       	add	r24, r28
 506:	9d 1f       	adc	r25, r29
 508:	80 0f       	add	r24, r16
 50a:	91 1f       	adc	r25, r17
 50c:	0e 94 08 04 	call	0x810	; 0x810 <strcpy>
			digs++;
 510:	0f 5f       	subi	r16, 0xFF	; 255
 512:	1f 4f       	sbci	r17, 0xFF	; 255
		} while ((strcmp (temp, " ")!=0)|(atoi(str)==0));
 514:	66 e6       	ldi	r22, 0x66	; 102
 516:	70 e0       	ldi	r23, 0x00	; 0
 518:	ce 01       	movw	r24, r28
 51a:	0b 96       	adiw	r24, 0x0b	; 11
 51c:	0e 94 ff 03 	call	0x7fe	; 0x7fe <strcmp>
 520:	7c 01       	movw	r14, r24
 522:	ce 01       	movw	r24, r28
 524:	01 96       	adiw	r24, 0x01	; 1
 526:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <atoi>
 52a:	ac 01       	movw	r20, r24
 52c:	21 e0       	ldi	r18, 0x01	; 1
 52e:	ef 28       	or	r14, r15
 530:	09 f4       	brne	.+2      	; 0x534 <__EEPROM_REGION_LENGTH__+0x134>
 532:	20 e0       	ldi	r18, 0x00	; 0
 534:	91 e0       	ldi	r25, 0x01	; 1
 536:	41 15       	cp	r20, r1
 538:	51 05       	cpc	r21, r1
 53a:	09 f0       	breq	.+2      	; 0x53e <__EEPROM_REGION_LENGTH__+0x13e>
 53c:	90 e0       	ldi	r25, 0x00	; 0
 53e:	92 2b       	or	r25, r18
 540:	09 f0       	breq	.+2      	; 0x544 <__EEPROM_REGION_LENGTH__+0x144>
 542:	a8 cf       	rjmp	.-176    	; 0x494 <__EEPROM_REGION_LENGTH__+0x94>

		num_trays = atoi(str);
 544:	50 93 03 01 	sts	0x0103, r21	; 0x800103 <num_trays+0x1>
 548:	40 93 02 01 	sts	0x0102, r20	; 0x800102 <num_trays>
		lcd_cmd(0x01);
 54c:	81 e0       	ldi	r24, 0x01	; 1
 54e:	0e 94 9e 00 	call	0x13c	; 0x13c <lcd_cmd>
		lcd_cmd(0x80);
 552:	80 e8       	ldi	r24, 0x80	; 128
 554:	0e 94 9e 00 	call	0x13c	; 0x13c <lcd_cmd>
		
		if (num_trays >=20)
 558:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <num_trays>
 55c:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <num_trays+0x1>
 560:	44 97       	sbiw	r24, 0x14	; 20
 562:	fc f0       	brlt	.+62     	; 0x5a2 <__EEPROM_REGION_LENGTH__+0x1a2>
		{
			lcd_msg("Enter a value less than 20");
 564:	81 eb       	ldi	r24, 0xB1	; 177
 566:	90 e0       	ldi	r25, 0x00	; 0
 568:	0e 94 23 01 	call	0x246	; 0x246 <lcd_msg>
 56c:	9f e9       	ldi	r25, 0x9F	; 159
 56e:	26 e8       	ldi	r18, 0x86	; 134
 570:	81 e0       	ldi	r24, 0x01	; 1
 572:	91 50       	subi	r25, 0x01	; 1
 574:	20 40       	sbci	r18, 0x00	; 0
 576:	80 40       	sbci	r24, 0x00	; 0
 578:	e1 f7       	brne	.-8      	; 0x572 <__EEPROM_REGION_LENGTH__+0x172>
 57a:	00 c0       	rjmp	.+0      	; 0x57c <__EEPROM_REGION_LENGTH__+0x17c>
 57c:	00 00       	nop
			_delay_ms(500);
			for(int i = 0; i<27 ; i++)
 57e:	00 e0       	ldi	r16, 0x00	; 0
 580:	10 e0       	ldi	r17, 0x00	; 0
 582:	0b c0       	rjmp	.+22     	; 0x59a <__EEPROM_REGION_LENGTH__+0x19a>
			{
				lcd_cmd(0x18);
 584:	88 e1       	ldi	r24, 0x18	; 24
 586:	0e 94 9e 00 	call	0x13c	; 0x13c <lcd_cmd>
 58a:	87 ea       	ldi	r24, 0xA7	; 167
 58c:	91 e6       	ldi	r25, 0x61	; 97
 58e:	01 97       	sbiw	r24, 0x01	; 1
 590:	f1 f7       	brne	.-4      	; 0x58e <__EEPROM_REGION_LENGTH__+0x18e>
 592:	00 c0       	rjmp	.+0      	; 0x594 <__EEPROM_REGION_LENGTH__+0x194>
 594:	00 00       	nop
		
		if (num_trays >=20)
		{
			lcd_msg("Enter a value less than 20");
			_delay_ms(500);
			for(int i = 0; i<27 ; i++)
 596:	0f 5f       	subi	r16, 0xFF	; 255
 598:	1f 4f       	sbci	r17, 0xFF	; 255
 59a:	0b 31       	cpi	r16, 0x1B	; 27
 59c:	11 05       	cpc	r17, r1
 59e:	94 f3       	brlt	.-28     	; 0x584 <__EEPROM_REGION_LENGTH__+0x184>
 5a0:	67 cf       	rjmp	.-306    	; 0x470 <__EEPROM_REGION_LENGTH__+0x70>
			goto redo_trays;
		}
		
		//Getting the volume of trays in milliliters
		redo_vol:
		lcd_msg("Vol. of a tray (ml)");
 5a2:	8c ec       	ldi	r24, 0xCC	; 204
 5a4:	90 e0       	ldi	r25, 0x00	; 0
 5a6:	0e 94 23 01 	call	0x246	; 0x246 <lcd_msg>
		lcd_cmd(0xC0);
 5aa:	80 ec       	ldi	r24, 0xC0	; 192
 5ac:	0e 94 9e 00 	call	0x13c	; 0x13c <lcd_cmd>
		lcd_cmd(0x0F);
 5b0:	8f e0       	ldi	r24, 0x0F	; 15
 5b2:	0e 94 9e 00 	call	0x13c	; 0x13c <lcd_cmd>
		strcpy(temp,"");
 5b6:	1b 86       	std	Y+11, r1	; 0x0b
		strcpy(str,"");
 5b8:	19 82       	std	Y+1, r1	; 0x01
		digs=0;
 5ba:	00 e0       	ldi	r16, 0x00	; 0
 5bc:	10 e0       	ldi	r17, 0x00	; 0
		do
		{
			strcpy(temp,keyfind());
 5be:	0e 94 30 01 	call	0x260	; 0x260 <keyfind>
 5c2:	bc 01       	movw	r22, r24
 5c4:	ce 01       	movw	r24, r28
 5c6:	0b 96       	adiw	r24, 0x0b	; 11
 5c8:	0e 94 08 04 	call	0x810	; 0x810 <strcpy>
			
			if (strcmp (temp, "=")==0){
 5cc:	64 e7       	ldi	r22, 0x74	; 116
 5ce:	70 e0       	ldi	r23, 0x00	; 0
 5d0:	ce 01       	movw	r24, r28
 5d2:	0b 96       	adiw	r24, 0x0b	; 11
 5d4:	0e 94 ff 03 	call	0x7fe	; 0x7fe <strcmp>
 5d8:	89 2b       	or	r24, r25
 5da:	01 f5       	brne	.+64     	; 0x61c <__EEPROM_REGION_LENGTH__+0x21c>
				if (digs>=1)
 5dc:	10 16       	cp	r1, r16
 5de:	11 06       	cpc	r1, r17
 5e0:	74 f5       	brge	.+92     	; 0x63e <__EEPROM_REGION_LENGTH__+0x23e>
				{
					lcd_cmd(0x10);
 5e2:	80 e1       	ldi	r24, 0x10	; 16
 5e4:	0e 94 9e 00 	call	0x13c	; 0x13c <lcd_cmd>
					lcd_msg(" ");
 5e8:	86 e6       	ldi	r24, 0x66	; 102
 5ea:	90 e0       	ldi	r25, 0x00	; 0
 5ec:	0e 94 23 01 	call	0x246	; 0x246 <lcd_msg>
					lcd_cmd(0x10);
 5f0:	80 e1       	ldi	r24, 0x10	; 16
 5f2:	0e 94 9e 00 	call	0x13c	; 0x13c <lcd_cmd>
					lcd_cmd(0x10);
 5f6:	80 e1       	ldi	r24, 0x10	; 16
 5f8:	0e 94 9e 00 	call	0x13c	; 0x13c <lcd_cmd>
					lcd_cmd(0x14);
 5fc:	84 e1       	ldi	r24, 0x14	; 20
 5fe:	0e 94 9e 00 	call	0x13c	; 0x13c <lcd_cmd>
					digs--;
 602:	01 50       	subi	r16, 0x01	; 1
 604:	11 09       	sbc	r17, r1
					strcpy(&str[digs]," ");
 606:	e1 e0       	ldi	r30, 0x01	; 1
 608:	f0 e0       	ldi	r31, 0x00	; 0
 60a:	ec 0f       	add	r30, r28
 60c:	fd 1f       	adc	r31, r29
 60e:	e0 0f       	add	r30, r16
 610:	f1 1f       	adc	r31, r17
 612:	80 e2       	ldi	r24, 0x20	; 32
 614:	90 e0       	ldi	r25, 0x00	; 0
 616:	91 83       	std	Z+1, r25	; 0x01
 618:	80 83       	st	Z, r24
				}
				continue;
 61a:	11 c0       	rjmp	.+34     	; 0x63e <__EEPROM_REGION_LENGTH__+0x23e>
			}
			lcd_msg(temp);
 61c:	ce 01       	movw	r24, r28
 61e:	0b 96       	adiw	r24, 0x0b	; 11
 620:	0e 94 23 01 	call	0x246	; 0x246 <lcd_msg>
			strcpy(&str[digs],temp);
 624:	be 01       	movw	r22, r28
 626:	65 5f       	subi	r22, 0xF5	; 245
 628:	7f 4f       	sbci	r23, 0xFF	; 255
 62a:	81 e0       	ldi	r24, 0x01	; 1
 62c:	90 e0       	ldi	r25, 0x00	; 0
 62e:	8c 0f       	add	r24, r28
 630:	9d 1f       	adc	r25, r29
 632:	80 0f       	add	r24, r16
 634:	91 1f       	adc	r25, r17
 636:	0e 94 08 04 	call	0x810	; 0x810 <strcpy>
			digs++;
 63a:	0f 5f       	subi	r16, 0xFF	; 255
 63c:	1f 4f       	sbci	r17, 0xFF	; 255
		} while ((strcmp (temp, " ")!=0)|(atoi(str)==0));
 63e:	66 e6       	ldi	r22, 0x66	; 102
 640:	70 e0       	ldi	r23, 0x00	; 0
 642:	ce 01       	movw	r24, r28
 644:	0b 96       	adiw	r24, 0x0b	; 11
 646:	0e 94 ff 03 	call	0x7fe	; 0x7fe <strcmp>
 64a:	7c 01       	movw	r14, r24
 64c:	ce 01       	movw	r24, r28
 64e:	01 96       	adiw	r24, 0x01	; 1
 650:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <atoi>
 654:	bc 01       	movw	r22, r24
 656:	21 e0       	ldi	r18, 0x01	; 1
 658:	ef 28       	or	r14, r15
 65a:	09 f4       	brne	.+2      	; 0x65e <__EEPROM_REGION_LENGTH__+0x25e>
 65c:	20 e0       	ldi	r18, 0x00	; 0
 65e:	91 e0       	ldi	r25, 0x01	; 1
 660:	61 15       	cp	r22, r1
 662:	71 05       	cpc	r23, r1
 664:	09 f0       	breq	.+2      	; 0x668 <__EEPROM_REGION_LENGTH__+0x268>
 666:	90 e0       	ldi	r25, 0x00	; 0
 668:	92 2b       	or	r25, r18
 66a:	09 f0       	breq	.+2      	; 0x66e <__EEPROM_REGION_LENGTH__+0x26e>
 66c:	a8 cf       	rjmp	.-176    	; 0x5be <__EEPROM_REGION_LENGTH__+0x1be>

		vol = atoi(str);
 66e:	07 2e       	mov	r0, r23
 670:	00 0c       	add	r0, r0
 672:	88 0b       	sbc	r24, r24
 674:	99 0b       	sbc	r25, r25
 676:	0e 94 7d 03 	call	0x6fa	; 0x6fa <__floatsisf>
 67a:	60 93 fe 00 	sts	0x00FE, r22	; 0x8000fe <__data_end>
 67e:	70 93 ff 00 	sts	0x00FF, r23	; 0x8000ff <__data_end+0x1>
 682:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_end+0x2>
 686:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_end+0x3>
		lcd_cmd(0x01);
 68a:	81 e0       	ldi	r24, 0x01	; 1
 68c:	0e 94 9e 00 	call	0x13c	; 0x13c <lcd_cmd>
		lcd_cmd(0x80);
 690:	80 e8       	ldi	r24, 0x80	; 128
 692:	0e 94 9e 00 	call	0x13c	; 0x13c <lcd_cmd>
		
		if (vol >=5000)
 696:	60 91 fe 00 	lds	r22, 0x00FE	; 0x8000fe <__data_end>
 69a:	70 91 ff 00 	lds	r23, 0x00FF	; 0x8000ff <__data_end+0x1>
 69e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_end+0x2>
 6a2:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_end+0x3>
 6a6:	20 e0       	ldi	r18, 0x00	; 0
 6a8:	30 e4       	ldi	r19, 0x40	; 64
 6aa:	4c e9       	ldi	r20, 0x9C	; 156
 6ac:	55 e4       	ldi	r21, 0x45	; 69
 6ae:	0e 94 b8 03 	call	0x770	; 0x770 <__gesf2>
 6b2:	88 23       	and	r24, r24
 6b4:	0c f4       	brge	.+2      	; 0x6b8 <__EEPROM_REGION_LENGTH__+0x2b8>
 6b6:	a8 ce       	rjmp	.-688    	; 0x408 <__EEPROM_REGION_LENGTH__+0x8>
		{
			lcd_msg("Enter a value less than 5000");
 6b8:	80 ee       	ldi	r24, 0xE0	; 224
 6ba:	90 e0       	ldi	r25, 0x00	; 0
 6bc:	0e 94 23 01 	call	0x246	; 0x246 <lcd_msg>
 6c0:	9f e9       	ldi	r25, 0x9F	; 159
 6c2:	26 e8       	ldi	r18, 0x86	; 134
 6c4:	81 e0       	ldi	r24, 0x01	; 1
 6c6:	91 50       	subi	r25, 0x01	; 1
 6c8:	20 40       	sbci	r18, 0x00	; 0
 6ca:	80 40       	sbci	r24, 0x00	; 0
 6cc:	e1 f7       	brne	.-8      	; 0x6c6 <__EEPROM_REGION_LENGTH__+0x2c6>
 6ce:	00 c0       	rjmp	.+0      	; 0x6d0 <__EEPROM_REGION_LENGTH__+0x2d0>
 6d0:	00 00       	nop
			_delay_ms(500);
			for(int i = 0; i<28 ; i++)
 6d2:	00 e0       	ldi	r16, 0x00	; 0
 6d4:	10 e0       	ldi	r17, 0x00	; 0
 6d6:	0b c0       	rjmp	.+22     	; 0x6ee <__EEPROM_REGION_LENGTH__+0x2ee>
			{
				lcd_cmd(0x18);
 6d8:	88 e1       	ldi	r24, 0x18	; 24
 6da:	0e 94 9e 00 	call	0x13c	; 0x13c <lcd_cmd>
 6de:	87 ea       	ldi	r24, 0xA7	; 167
 6e0:	91 e6       	ldi	r25, 0x61	; 97
 6e2:	01 97       	sbiw	r24, 0x01	; 1
 6e4:	f1 f7       	brne	.-4      	; 0x6e2 <__EEPROM_REGION_LENGTH__+0x2e2>
 6e6:	00 c0       	rjmp	.+0      	; 0x6e8 <__EEPROM_REGION_LENGTH__+0x2e8>
 6e8:	00 00       	nop
		
		if (vol >=5000)
		{
			lcd_msg("Enter a value less than 5000");
			_delay_ms(500);
			for(int i = 0; i<28 ; i++)
 6ea:	0f 5f       	subi	r16, 0xFF	; 255
 6ec:	1f 4f       	sbci	r17, 0xFF	; 255
 6ee:	0c 31       	cpi	r16, 0x1C	; 28
 6f0:	11 05       	cpc	r17, r1
 6f2:	94 f3       	brlt	.-28     	; 0x6d8 <__EEPROM_REGION_LENGTH__+0x2d8>
 6f4:	56 cf       	rjmp	.-340    	; 0x5a2 <__EEPROM_REGION_LENGTH__+0x1a2>

000006f6 <__floatunsisf>:
 6f6:	e8 94       	clt
 6f8:	09 c0       	rjmp	.+18     	; 0x70c <__floatsisf+0x12>

000006fa <__floatsisf>:
 6fa:	97 fb       	bst	r25, 7
 6fc:	3e f4       	brtc	.+14     	; 0x70c <__floatsisf+0x12>
 6fe:	90 95       	com	r25
 700:	80 95       	com	r24
 702:	70 95       	com	r23
 704:	61 95       	neg	r22
 706:	7f 4f       	sbci	r23, 0xFF	; 255
 708:	8f 4f       	sbci	r24, 0xFF	; 255
 70a:	9f 4f       	sbci	r25, 0xFF	; 255
 70c:	99 23       	and	r25, r25
 70e:	a9 f0       	breq	.+42     	; 0x73a <__floatsisf+0x40>
 710:	f9 2f       	mov	r31, r25
 712:	96 e9       	ldi	r25, 0x96	; 150
 714:	bb 27       	eor	r27, r27
 716:	93 95       	inc	r25
 718:	f6 95       	lsr	r31
 71a:	87 95       	ror	r24
 71c:	77 95       	ror	r23
 71e:	67 95       	ror	r22
 720:	b7 95       	ror	r27
 722:	f1 11       	cpse	r31, r1
 724:	f8 cf       	rjmp	.-16     	; 0x716 <__floatsisf+0x1c>
 726:	fa f4       	brpl	.+62     	; 0x766 <__floatsisf+0x6c>
 728:	bb 0f       	add	r27, r27
 72a:	11 f4       	brne	.+4      	; 0x730 <__floatsisf+0x36>
 72c:	60 ff       	sbrs	r22, 0
 72e:	1b c0       	rjmp	.+54     	; 0x766 <__floatsisf+0x6c>
 730:	6f 5f       	subi	r22, 0xFF	; 255
 732:	7f 4f       	sbci	r23, 0xFF	; 255
 734:	8f 4f       	sbci	r24, 0xFF	; 255
 736:	9f 4f       	sbci	r25, 0xFF	; 255
 738:	16 c0       	rjmp	.+44     	; 0x766 <__floatsisf+0x6c>
 73a:	88 23       	and	r24, r24
 73c:	11 f0       	breq	.+4      	; 0x742 <__floatsisf+0x48>
 73e:	96 e9       	ldi	r25, 0x96	; 150
 740:	11 c0       	rjmp	.+34     	; 0x764 <__floatsisf+0x6a>
 742:	77 23       	and	r23, r23
 744:	21 f0       	breq	.+8      	; 0x74e <__floatsisf+0x54>
 746:	9e e8       	ldi	r25, 0x8E	; 142
 748:	87 2f       	mov	r24, r23
 74a:	76 2f       	mov	r23, r22
 74c:	05 c0       	rjmp	.+10     	; 0x758 <__floatsisf+0x5e>
 74e:	66 23       	and	r22, r22
 750:	71 f0       	breq	.+28     	; 0x76e <__floatsisf+0x74>
 752:	96 e8       	ldi	r25, 0x86	; 134
 754:	86 2f       	mov	r24, r22
 756:	70 e0       	ldi	r23, 0x00	; 0
 758:	60 e0       	ldi	r22, 0x00	; 0
 75a:	2a f0       	brmi	.+10     	; 0x766 <__floatsisf+0x6c>
 75c:	9a 95       	dec	r25
 75e:	66 0f       	add	r22, r22
 760:	77 1f       	adc	r23, r23
 762:	88 1f       	adc	r24, r24
 764:	da f7       	brpl	.-10     	; 0x75c <__floatsisf+0x62>
 766:	88 0f       	add	r24, r24
 768:	96 95       	lsr	r25
 76a:	87 95       	ror	r24
 76c:	97 f9       	bld	r25, 7
 76e:	08 95       	ret

00000770 <__gesf2>:
 770:	0e 94 bd 03 	call	0x77a	; 0x77a <__fp_cmp>
 774:	08 f4       	brcc	.+2      	; 0x778 <__gesf2+0x8>
 776:	8f ef       	ldi	r24, 0xFF	; 255
 778:	08 95       	ret

0000077a <__fp_cmp>:
 77a:	99 0f       	add	r25, r25
 77c:	00 08       	sbc	r0, r0
 77e:	55 0f       	add	r21, r21
 780:	aa 0b       	sbc	r26, r26
 782:	e0 e8       	ldi	r30, 0x80	; 128
 784:	fe ef       	ldi	r31, 0xFE	; 254
 786:	16 16       	cp	r1, r22
 788:	17 06       	cpc	r1, r23
 78a:	e8 07       	cpc	r30, r24
 78c:	f9 07       	cpc	r31, r25
 78e:	c0 f0       	brcs	.+48     	; 0x7c0 <__fp_cmp+0x46>
 790:	12 16       	cp	r1, r18
 792:	13 06       	cpc	r1, r19
 794:	e4 07       	cpc	r30, r20
 796:	f5 07       	cpc	r31, r21
 798:	98 f0       	brcs	.+38     	; 0x7c0 <__fp_cmp+0x46>
 79a:	62 1b       	sub	r22, r18
 79c:	73 0b       	sbc	r23, r19
 79e:	84 0b       	sbc	r24, r20
 7a0:	95 0b       	sbc	r25, r21
 7a2:	39 f4       	brne	.+14     	; 0x7b2 <__fp_cmp+0x38>
 7a4:	0a 26       	eor	r0, r26
 7a6:	61 f0       	breq	.+24     	; 0x7c0 <__fp_cmp+0x46>
 7a8:	23 2b       	or	r18, r19
 7aa:	24 2b       	or	r18, r20
 7ac:	25 2b       	or	r18, r21
 7ae:	21 f4       	brne	.+8      	; 0x7b8 <__fp_cmp+0x3e>
 7b0:	08 95       	ret
 7b2:	0a 26       	eor	r0, r26
 7b4:	09 f4       	brne	.+2      	; 0x7b8 <__fp_cmp+0x3e>
 7b6:	a1 40       	sbci	r26, 0x01	; 1
 7b8:	a6 95       	lsr	r26
 7ba:	8f ef       	ldi	r24, 0xFF	; 255
 7bc:	81 1d       	adc	r24, r1
 7be:	81 1d       	adc	r24, r1
 7c0:	08 95       	ret

000007c2 <atoi>:
 7c2:	fc 01       	movw	r30, r24
 7c4:	88 27       	eor	r24, r24
 7c6:	99 27       	eor	r25, r25
 7c8:	e8 94       	clt
 7ca:	21 91       	ld	r18, Z+
 7cc:	20 32       	cpi	r18, 0x20	; 32
 7ce:	e9 f3       	breq	.-6      	; 0x7ca <atoi+0x8>
 7d0:	29 30       	cpi	r18, 0x09	; 9
 7d2:	10 f0       	brcs	.+4      	; 0x7d8 <atoi+0x16>
 7d4:	2e 30       	cpi	r18, 0x0E	; 14
 7d6:	c8 f3       	brcs	.-14     	; 0x7ca <atoi+0x8>
 7d8:	2b 32       	cpi	r18, 0x2B	; 43
 7da:	41 f0       	breq	.+16     	; 0x7ec <atoi+0x2a>
 7dc:	2d 32       	cpi	r18, 0x2D	; 45
 7de:	39 f4       	brne	.+14     	; 0x7ee <atoi+0x2c>
 7e0:	68 94       	set
 7e2:	04 c0       	rjmp	.+8      	; 0x7ec <atoi+0x2a>
 7e4:	0e 94 0f 04 	call	0x81e	; 0x81e <__mulhi_const_10>
 7e8:	82 0f       	add	r24, r18
 7ea:	91 1d       	adc	r25, r1
 7ec:	21 91       	ld	r18, Z+
 7ee:	20 53       	subi	r18, 0x30	; 48
 7f0:	2a 30       	cpi	r18, 0x0A	; 10
 7f2:	c0 f3       	brcs	.-16     	; 0x7e4 <atoi+0x22>
 7f4:	1e f4       	brtc	.+6      	; 0x7fc <atoi+0x3a>
 7f6:	90 95       	com	r25
 7f8:	81 95       	neg	r24
 7fa:	9f 4f       	sbci	r25, 0xFF	; 255
 7fc:	08 95       	ret

000007fe <strcmp>:
 7fe:	fb 01       	movw	r30, r22
 800:	dc 01       	movw	r26, r24
 802:	8d 91       	ld	r24, X+
 804:	01 90       	ld	r0, Z+
 806:	80 19       	sub	r24, r0
 808:	01 10       	cpse	r0, r1
 80a:	d9 f3       	breq	.-10     	; 0x802 <__DATA_REGION_LENGTH__+0x2>
 80c:	99 0b       	sbc	r25, r25
 80e:	08 95       	ret

00000810 <strcpy>:
 810:	fb 01       	movw	r30, r22
 812:	dc 01       	movw	r26, r24
 814:	01 90       	ld	r0, Z+
 816:	0d 92       	st	X+, r0
 818:	00 20       	and	r0, r0
 81a:	e1 f7       	brne	.-8      	; 0x814 <strcpy+0x4>
 81c:	08 95       	ret

0000081e <__mulhi_const_10>:
 81e:	7a e0       	ldi	r23, 0x0A	; 10
 820:	97 9f       	mul	r25, r23
 822:	90 2d       	mov	r25, r0
 824:	87 9f       	mul	r24, r23
 826:	80 2d       	mov	r24, r0
 828:	91 0d       	add	r25, r1
 82a:	11 24       	eor	r1, r1
 82c:	08 95       	ret

0000082e <_exit>:
 82e:	f8 94       	cli

00000830 <__stop_program>:
 830:	ff cf       	rjmp	.-2      	; 0x830 <__stop_program>
